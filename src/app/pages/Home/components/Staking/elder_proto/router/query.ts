// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: elder/router/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { QueryRollTxList } from "./roll_txs";

export const protobufPackage = "elder.router";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryTxListRequest {
  rollId: number;
  startBlock: number;
  endBlock: number;
}

export interface QueryTxListResponse {
  rollId: number;
  txs: QueryRollTxList[];
  currentHeight: number;
}

export interface QueryTxsByBlockRequest {
  rollId: number;
  block: number;
}

export interface QueryTxsByBlockResponse {
  rollId: number;
  txs: QueryRollTxList | undefined;
  currentHeight: number;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryTxListRequest(): QueryTxListRequest {
  return { rollId: 0, startBlock: 0, endBlock: 0 };
}

export const QueryTxListRequest: MessageFns<QueryTxListRequest> = {
  encode(message: QueryTxListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rollId !== 0) {
      writer.uint32(8).uint64(message.rollId);
    }
    if (message.startBlock !== 0) {
      writer.uint32(16).uint64(message.startBlock);
    }
    if (message.endBlock !== 0) {
      writer.uint32(24).uint64(message.endBlock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTxListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTxListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rollId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startBlock = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endBlock = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTxListRequest {
    return {
      rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
      startBlock: isSet(object.startBlock) ? globalThis.Number(object.startBlock) : 0,
      endBlock: isSet(object.endBlock) ? globalThis.Number(object.endBlock) : 0,
    };
  },

  toJSON(message: QueryTxListRequest): unknown {
    const obj: any = {};
    if (message.rollId !== 0) {
      obj.rollId = Math.round(message.rollId);
    }
    if (message.startBlock !== 0) {
      obj.startBlock = Math.round(message.startBlock);
    }
    if (message.endBlock !== 0) {
      obj.endBlock = Math.round(message.endBlock);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTxListRequest>, I>>(base?: I): QueryTxListRequest {
    return QueryTxListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTxListRequest>, I>>(object: I): QueryTxListRequest {
    const message = createBaseQueryTxListRequest();
    message.rollId = object.rollId ?? 0;
    message.startBlock = object.startBlock ?? 0;
    message.endBlock = object.endBlock ?? 0;
    return message;
  },
};

function createBaseQueryTxListResponse(): QueryTxListResponse {
  return { rollId: 0, txs: [], currentHeight: 0 };
}

export const QueryTxListResponse: MessageFns<QueryTxListResponse> = {
  encode(message: QueryTxListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rollId !== 0) {
      writer.uint32(8).uint64(message.rollId);
    }
    for (const v of message.txs) {
      QueryRollTxList.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.currentHeight !== 0) {
      writer.uint32(24).uint64(message.currentHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTxListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTxListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rollId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txs.push(QueryRollTxList.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTxListResponse {
    return {
      rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
      txs: globalThis.Array.isArray(object?.txs) ? object.txs.map((e: any) => QueryRollTxList.fromJSON(e)) : [],
      currentHeight: isSet(object.currentHeight) ? globalThis.Number(object.currentHeight) : 0,
    };
  },

  toJSON(message: QueryTxListResponse): unknown {
    const obj: any = {};
    if (message.rollId !== 0) {
      obj.rollId = Math.round(message.rollId);
    }
    if (message.txs?.length) {
      obj.txs = message.txs.map((e) => QueryRollTxList.toJSON(e));
    }
    if (message.currentHeight !== 0) {
      obj.currentHeight = Math.round(message.currentHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTxListResponse>, I>>(base?: I): QueryTxListResponse {
    return QueryTxListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTxListResponse>, I>>(object: I): QueryTxListResponse {
    const message = createBaseQueryTxListResponse();
    message.rollId = object.rollId ?? 0;
    message.txs = object.txs?.map((e) => QueryRollTxList.fromPartial(e)) || [];
    message.currentHeight = object.currentHeight ?? 0;
    return message;
  },
};

function createBaseQueryTxsByBlockRequest(): QueryTxsByBlockRequest {
  return { rollId: 0, block: 0 };
}

export const QueryTxsByBlockRequest: MessageFns<QueryTxsByBlockRequest> = {
  encode(message: QueryTxsByBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rollId !== 0) {
      writer.uint32(8).uint64(message.rollId);
    }
    if (message.block !== 0) {
      writer.uint32(16).uint64(message.block);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTxsByBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTxsByBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rollId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.block = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTxsByBlockRequest {
    return {
      rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
      block: isSet(object.block) ? globalThis.Number(object.block) : 0,
    };
  },

  toJSON(message: QueryTxsByBlockRequest): unknown {
    const obj: any = {};
    if (message.rollId !== 0) {
      obj.rollId = Math.round(message.rollId);
    }
    if (message.block !== 0) {
      obj.block = Math.round(message.block);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTxsByBlockRequest>, I>>(base?: I): QueryTxsByBlockRequest {
    return QueryTxsByBlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTxsByBlockRequest>, I>>(object: I): QueryTxsByBlockRequest {
    const message = createBaseQueryTxsByBlockRequest();
    message.rollId = object.rollId ?? 0;
    message.block = object.block ?? 0;
    return message;
  },
};

function createBaseQueryTxsByBlockResponse(): QueryTxsByBlockResponse {
  return { rollId: 0, txs: undefined, currentHeight: 0 };
}

export const QueryTxsByBlockResponse: MessageFns<QueryTxsByBlockResponse> = {
  encode(message: QueryTxsByBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rollId !== 0) {
      writer.uint32(8).uint64(message.rollId);
    }
    if (message.txs !== undefined) {
      QueryRollTxList.encode(message.txs, writer.uint32(18).fork()).join();
    }
    if (message.currentHeight !== 0) {
      writer.uint32(24).uint64(message.currentHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTxsByBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTxsByBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rollId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txs = QueryRollTxList.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTxsByBlockResponse {
    return {
      rollId: isSet(object.rollId) ? globalThis.Number(object.rollId) : 0,
      txs: isSet(object.txs) ? QueryRollTxList.fromJSON(object.txs) : undefined,
      currentHeight: isSet(object.currentHeight) ? globalThis.Number(object.currentHeight) : 0,
    };
  },

  toJSON(message: QueryTxsByBlockResponse): unknown {
    const obj: any = {};
    if (message.rollId !== 0) {
      obj.rollId = Math.round(message.rollId);
    }
    if (message.txs !== undefined) {
      obj.txs = QueryRollTxList.toJSON(message.txs);
    }
    if (message.currentHeight !== 0) {
      obj.currentHeight = Math.round(message.currentHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTxsByBlockResponse>, I>>(base?: I): QueryTxsByBlockResponse {
    return QueryTxsByBlockResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTxsByBlockResponse>, I>>(object: I): QueryTxsByBlockResponse {
    const message = createBaseQueryTxsByBlockResponse();
    message.rollId = object.rollId ?? 0;
    message.txs = (object.txs !== undefined && object.txs !== null)
      ? QueryRollTxList.fromPartial(object.txs)
      : undefined;
    message.currentHeight = object.currentHeight ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of TxList items. */
  TxList(request: QueryTxListRequest): Promise<QueryTxListResponse>;
  /** Queries a list of TxByBlock items. */
  TxsByBlock(request: QueryTxsByBlockRequest): Promise<QueryTxsByBlockResponse>;
}

export const QueryServiceName = "elder.router.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.TxList = this.TxList.bind(this);
    this.TxsByBlock = this.TxsByBlock.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  TxList(request: QueryTxListRequest): Promise<QueryTxListResponse> {
    const data = QueryTxListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxList", data);
    return promise.then((data) => QueryTxListResponse.decode(new BinaryReader(data)));
  }

  TxsByBlock(request: QueryTxsByBlockRequest): Promise<QueryTxsByBlockResponse> {
    const data = QueryTxsByBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxsByBlock", data);
    return promise.then((data) => QueryTxsByBlockResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
